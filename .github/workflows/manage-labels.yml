name: "Synchronisation des Labels sur le Dernier Repo Cr√©√©"

on:
  schedule:
    - cron: "15 19 * * *"  # Ex√©cute chaque jour √† 19h
  workflow_dispatch:
  repository_dispatch:
    types: [refresh]

jobs:
  sync-labels:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìÇ V√©rifier la pr√©sence du fichier labels.json
        run: |
          if [ ! -f .github/config/labels.json ]; then
            echo "‚ùå labels.json n'existe pas !"
            exit 1
          else
            echo "‚úÖ labels.json trouv√© !"
          fi

      - name: üîç V√©rifier si le token acc√®de aux repositories et r√©cup√©rer le dernier repo cr√©√©
        env:
          GH_TOKEN: ${{ secrets.LABELGITHUB_TOKEN }}
        run: |
          echo "üîç R√©cup√©ration du dernier repository cr√©√©..."
          # R√©cup√©rer les repos tri√©s par date de cr√©ation (le plus r√©cent en premier)
          gh api user/repos --paginate --jq 'sort_by(-.created_at) | .[].full_name' > repos_list.txt

          if [ ! -s repos_list.txt ]; then
            echo "‚ùå Aucun repository trouv√© !"
            exit 1
          fi

          # Prendre uniquement le premier repo (le plus r√©cent)
          head -n 1 repos_list.txt > latest_repo.txt
          echo "‚úÖ Dernier repository cr√©√© :"
          cat latest_repo.txt

      - name: ‚ö° Ne traiter que le dernier repository cr√©√©
        env:
          GH_TOKEN: ${{ secrets.LABELGITHUB_TOKEN }}
        run: |
          echo "üîç D√©but du traitement du dernier repository cr√©√©..."

          while IFS= read -r repo; do
            if [[ "$repo" == "djoudj-dev/.gitworkflow" ]]; then
              echo "‚ö†Ô∏è Ignor√© : $repo (repository priv√©)"
              continue
            fi

            echo "üìå V√©rification du repository $repo"

            if gh api repos/"$repo" --silent; then
              echo "‚úÖ R√©cup√©ration des labels actuels de $repo..."

              # Obtenir la liste des labels existants
              EXISTING_LABELS=$(gh api repos/"$repo"/labels --jq '.[].name' | tr -d '"')

              # Obtenir la liste des labels d√©finis dans labels.json
              NEW_LABELS=$(jq -r '.[].name' .github/config/labels.json)

              # V√©rifier si tous les labels requis sont d√©j√† pr√©sents
              MISSING_LABELS=$(comm -23 <(echo "$NEW_LABELS" | sort) <(echo "$EXISTING_LABELS" | sort))

              if [ -z "$MISSING_LABELS" ]; then
                echo "‚úÖ Le repository $repo poss√®de d√©j√† tous les labels requis. Aucune action n√©cessaire."
                continue
              fi

              echo "üîç Des labels sont manquants, mise √† jour du repository..."

              # Trouver les labels √† supprimer (ceux qui existent mais ne sont pas d√©finis dans labels.json)
              LABELS_TO_DELETE=$(comm -23 <(echo "$EXISTING_LABELS" | sort) <(echo "$NEW_LABELS" | sort))

              # Supprimer les labels obsol√®tes un par un
              echo "$LABELS_TO_DELETE" | while IFS= read -r label; do
                if [ -n "$label" ]; then
                  echo "üóëÔ∏è Suppression du label : $label"
                  gh api -X DELETE repos/"$repo"/labels/"$label" || echo "‚ö†Ô∏è Impossible de supprimer $label"
                fi
              done

              echo "‚úÖ Ajout des nouveaux labels pour $repo"

              # Ajouter les nouveaux labels un par un
              jq -c '.[]' .github/config/labels.json | while IFS= read -r label; do
                NAME=$(echo "$label" | jq -r ".name")
                DESCRIPTION=$(echo "$label" | jq -r ".description")
                COLOR=$(echo "$label" | jq -r ".color")

                # V√©rifier si le label existe d√©j√†
                if echo "$EXISTING_LABELS" | grep -q "^$NAME$"; then
                  echo "‚è© Label d√©j√† existant : $NAME"
                else
                  echo "üìå Ajout du label : $NAME"
                  gh api -X POST repos/"$repo"/labels \
                    -H "Accept: application/vnd.github.v3+json" \
                    -f name="$NAME" \
                    -f description="$DESCRIPTION" \
                    -f color="$COLOR" || echo "‚ö†Ô∏è Impossible d'ajouter $NAME"
                fi
              done

            else
              echo "‚ö†Ô∏è Le repo $repo est inaccessible. Il sera ignor√©."
            fi
          done < latest_repo.txt

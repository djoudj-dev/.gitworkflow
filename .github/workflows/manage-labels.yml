name: "Synchronisation des Labels sur Tous les Repos"

on:
  schedule:
    - cron: "0 0 * * 1"  # Ex√©cute chaque lundi √† minuit
  workflow_dispatch:

jobs:
  sync-labels:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v2

      - name: üìÇ V√©rifier la pr√©sence du fichier labels.json
        run: |
          if [ ! -f .github/config/labels.json ]; then
            echo "‚ùå labels.json n'existe pas !"
            exit 1
          else
            echo "‚úÖ labels.json trouv√© !"
          fi

      - name: üîç V√©rifier si le token acc√®de aux repositories
        env:
          GH_TOKEN: ${{ secrets.LABELGITHUB_TOKEN }}
        run: |
          echo "üîç R√©cup√©ration de la liste des repositories..."
          gh api user/repos --paginate --jq '.[].full_name' > repos_list.txt

          if [ ! -s repos_list.txt ]; then
            echo "‚ùå Aucun repository trouv√© !"
            exit 1
          fi

          cat repos_list.txt

      - name: ‚ö° Ne supprimer que les labels obsol√®tes et ajouter les nouveaux
        env:
          GH_TOKEN: ${{ secrets.LABELGITHUB_TOKEN }}
        run: |
          echo "üîç D√©but du traitement des repositories..."

          while IFS= read -r repo; do
            if [[ "$repo" == "djoudj-dev/.gitworkflow" ]]; then
              echo "‚ö†Ô∏è Ignor√© : $repo (repository priv√©)"
              continue
            fi

            echo "üìå V√©rification du repository $repo"

            if gh api repos/"$repo" --silent; then
              echo "‚úÖ R√©cup√©ration des labels actuels de $repo..."
              
              # Obtenir la liste des labels existants
              EXISTING_LABELS=$(gh api repos/"$repo"/labels --jq '.[].name' | tr -d '"')

              # Obtenir la liste des labels d√©finis dans labels.json
              NEW_LABELS=$(jq -r '.[].name' .github/config/labels.json)

              # Trouver les labels √† supprimer (ceux qui existent mais ne sont pas d√©finis dans labels.json)
              LABELS_TO_DELETE=$(comm -23 <(echo "$EXISTING_LABELS" | sort) <(echo "$NEW_LABELS" | sort))

              # Supprimer les labels obsol√®tes un par un
              echo "$LABELS_TO_DELETE" | while IFS= read -r label; do
                if [ -n "$label" ]; then
                  echo "üóëÔ∏è Suppression du label : $label"
                  gh api -X DELETE repos/"$repo"/labels/"$label" || echo "‚ö†Ô∏è Impossible de supprimer $label"
                fi
              done

              echo "‚úÖ Ajout des nouveaux labels pour $repo"

              # Ajouter les nouveaux labels un par un
              jq -c '.[]' .github/config/labels.json | while IFS= read -r label; do
                NAME=$(echo "$label" | jq -r ".name")
                DESCRIPTION=$(echo "$label" | jq -r ".description")
                COLOR=$(echo "$label" | jq -r ".color")

                echo "üìå Ajout du label : $NAME"

                gh api -X POST repos/"$repo"/labels \
                  -H "Accept: application/vnd.github.v3+json" \
                  -f name="$NAME" \
                  -f description="$DESCRIPTION" \
                  -f color="$COLOR" || echo "‚ö†Ô∏è Impossible d'ajouter $NAME"
              done

            else
              echo "‚ö†Ô∏è Le repo $repo est inaccessible. Il sera ignor√©."
            fi
          done < repos_list.txt
